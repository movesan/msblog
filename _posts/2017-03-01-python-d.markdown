---
layout:     post
title:      "Python从零单排系列（四）---面向对象编程"
subtitle:   " 面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想 "
date:       2017-03-01 6:25:00
author:     "Movesan"
header-img: "img/post-bg/post-bg-python.png"
catalog: true
tags:
    - Python

---

>[Python从零单排系列（一）---初识Python](http://movesan.me/2017/02/20/python-a/)<br>
>[Python从零单排系列（二）---Python基础](http://movesan.me/2017/02/22/python-b/)<br>
>[Python从零单排系列（三）---Python函数](http://movesan.me/2017/02/27/python-c/)<br>
>[Python从零单排系列（五）---模块化以及相关库](http://movesan.me/2017/03/02/python-e/)<br>
>[Python从零单排系列（六）---异常处理](http://movesan.me/2017/03/03/python-f/)<br>
>[Python从零单排系列（七）---函数式编程](http://movesan.me/2017/03/07/python-g/)<br>

---

## 引言

和Java一样，Python也是一门面向对象的语言，这也是Python与Java的一个相似之处。我们应该都了解了面向对象语言的特征，那么接下来了解下Python是如何实现面向对象编程的。

---

## 类和实例

#### 创建类

使用class关键字可以创建一个类，实例如下:

    class ClassName(Object):
        """类注释"""
        class_suite  #类体

* ClassName为类名，通常是开头大写，驼峰命名
* Object表示父类，如果写成Object则表示继承顶级父类，就和Java中默认顶级父类为Object一样
* 类中第一行多数为类的注释，与Java不一样，Python中注释一般都写在里面
* class_suite 由类成员，方法，数据属性组成
* 类的帮助信息可以通过ClassName.__doc__查看

**举个栗子**

    class Employee(Object):
       """所有员工的基类"""
       empCount = 0

       def __init__(self, name, salary):
          self.name = name
          self.salary = salary
          Employee.empCount += 1

       def displayCount(self):
         print "Total Employee %d" % Employee.empCount

       def displayEmployee(self):
          print "Name : ", self.name,  ", Salary: ", self.salary


* empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问
* 第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法
* self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。相当于Java中的this

**self代表类的实例，而非类**

类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。

    class Test:
        def prt(self):
            print(self)
            print(self.__class__)

    t = Test()
    t.prt()

以上实例执行结果为：

    <__main__.Test instance at 0x10d066878>
    __main__.Test

从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。

self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:

    class Test:
        def prt(runoob):
            print(runoob)
            print(runoob.__class__)

    t = Test()
    t.prt()

以上实例执行结果为：

    <__main__.Test instance at 0x10d066878>
    __main__.Test

#### 创建实例对象

要创建一个类的实例，你可以使用类的名称，并通过__init__方法接受参数。

    # 创建 Employee 类的第一个对象
    emp1 = Employee("Zara", 2000)
    # 创建 Employee 类的第二个对象
    emp2 = Employee("Manni", 5000)

#### 访问对象属性

您可以使用点(.)来访问对象的属性。使用如下类的名称访问类变量:

    emp1.displayEmployee()
    emp2.displayEmployee()
    print "Total Employee %d" % Employee.empCount

完整实例：

    class Employee(Object):
       """所有员工的基类"""
       empCount = 0

       def __init__(self, name, salary):
          self.name = name
          self.salary = salary
          Employee.empCount += 1

       def displayCount(self):
         print "Total Employee %d" % Employee.empCount

       def displayEmployee(self):
          print "Name : ", self.name,  ", Salary: ", self.salary

    # 创建 Employee 类的第一个对象
    emp1 = Employee("Zara", 2000)
    # 创建 Employee 类的第二个对象
    emp2 = Employee("Manni", 5000)
    emp1.displayEmployee()
    emp2.displayEmployee()
    print "Total Employee %d" % Employee.empCount

执行以上代码输出结果如下：

    Name :  Zara ,Salary:  2000
    Name :  Manni ,Salary:  5000
    Total Employee 2

你可以添加，删除，修改类的属性，如下所示：

    emp1.age = 7  # 添加一个 'age' 属性
    emp1.age = 8  # 修改 'age' 属性
    del emp1.age  # 删除 'age' 属性

你也可以使用以下函数的方式来访问属性：

* getattr(obj, name[, default]) : 访问对象的属性。
* hasattr(obj, name) : 检查是否存在一个属性。
* setattr(obj, name, value) : 设置一个属性。如果属性不存在，会创建一个新属性。
* delattr(obj, name) : 删除属性。

如下所示：

    hasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。
    getattr(emp1, 'age')    # 返回 'age' 属性的值
    setattr(emp1, 'age', 8) # 添加属性 'age' 值为 8
    delattr(empl, 'age')    # 删除属性 'age'

#### Python内置类属性

* \__dict__ : 类的属性（包含一个字典，由类的数据属性组成）
* \__doc__ :类的文档字符串
* \__name__: 类名
* \__module__: 类定义所在的模块（类的全名是'\__main__.className'，如果类位于一个导入模块mymod中，那么className.\__module__ 等于 mymod）
* \__bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）

Python内置类属性调用实例如下：

    class Employee(Object):
       """所有员工的基类"""
       empCount = 0

       def __init__(self, name, salary):
          self.name = name
          self.salary = salary
          Employee.empCount += 1

       def displayCount(self):
         print "Total Employee %d" % Employee.empCount

       def displayEmployee(self):
          print "Name : ", self.name,  ", Salary: ", self.salary

    print "Employee.__doc__:", Employee.__doc__
    print "Employee.__name__:", Employee.__name__
    print "Employee.__module__:", Employee.__module__
    print "Employee.__bases__:", Employee.__bases__
    print "Employee.__dict__:", Employee.__dict__

执行以上代码输出结果如下：

    Employee.__doc__: 所有员工的基类
    Employee.__name__: Employee
    Employee.__module__: __main__
    Employee.__bases__: ()
    Employee.__dict__: {'__module__': '__main__', 'displayCount': <function displayCount at 0x10a939c80>, 'empCount': 0,
    'displayEmployee': <function displayEmployee at 0x10a93caa0>,
    '__doc__': '\xe6\x89\x80\xe6\x9c\x89\xe5\x91\x98\xe5\xb7\xa5\xe7\x9a\x84\xe5\x9f\xba\xe7\xb1\xbb', '__init__': <function __init__ at 0x10a939578>}

#### 定制类

**使用\__slots__限制类属性**

Python作为动态语言，具有动态语言的灵活性，可以在定义一个类后，动态的给实例绑定属性和方法。

    >>> class Student(object):
    ...     pass
    ...

然后，尝试给实例绑定一个属性：

    >>> s = Student()
    >>> s.name = 'Michael' # 动态给实例绑定一个属性
    >>> print s.name
    Michael

还可以尝试给实例绑定一个方法：

    >>> def set_age(self, age): # 定义一个函数作为实例方法
    ...     self.age = age
    ...
    >>> from types import MethodType
    >>> s.set_age = MethodType(set_age, s, Student) # 给实例绑定一个方法
    >>> s.set_age(25) # 调用实例方法
    >>> s.age # 测试结果
    25

但是，给一个实例绑定的方法，对另一个实例是不起作用的：

    >>> s2 = Student() # 创建新的实例
    >>> s2.set_age(25) # 尝试调用方法
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'Student' object has no attribute 'set_age'

为了给所有实例都绑定方法，可以给class绑定方法：

    >>> def set_score(self, score):
    ...     self.score = score
    ...
    >>> Student.set_score = MethodType(set_score, None, Student)

给class绑定方法后，所有实例均可调用：

    >>> s.set_score(100)
    >>> s.score
    100
    >>> s2.set_score(99)
    >>> s2.score
    99

但是如果想要限制实例和类的属性，可以定义一个特殊的\__slots__变量，来限制该class能添加的属性：

    >>> class Student(object):
    ...     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
    ...

这样就不可以像上述那样动态添加属性了。使用\__slots__要注意，\__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的。

**使用\__str__打印字符串**

我们知道Java中打印对象是默认调用了对象的toString()方法，该方法为Object方法，在Python中也有类似的机制。

我们先定义一个Student类，打印一个实例：

    >>> class Student(object):
    ...     def __init__(self, name):
    ...         self.name = name
    ...
    >>> print Student('Michael')
    <__main__.Student object at 0x109afb190>

重写\__str__方法，打印输出：

    >>> class Student(object):
    ...     def __init__(self, name):
    ...         self.name = name
    ...     def __str__(self):
    ...         return 'Student object (name: %s)' % self.name
    ...
    >>> print Student('Michael')
    Student object (name: Michael)

可以看到默认调用了我们的重写方法。但是你会发现直接敲变量不用print，打印出来的实例还是引用信息，这是因为直接显示变量调用的不是\__str__()，而是\__repr__()，
两者的区别是\__str__()返回用户看到的字符串，而\__repr__()返回程序开发者看到的字符串，也就是说，\__repr__()是为调试服务的。

**使用\__iter__迭代器**

如果一个类想被用于for ... in循环，类似list或tuple那样，就必须实现一个\__iter__()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()
方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。

我们以斐波那契数列为例，写一个Fib类，可以作用于for循环：

    class Fib(object):
        def __init__(self):
            self.a, self.b = 0, 1 # 初始化两个计数器a，b

        def __iter__(self):
            return self # 实例本身就是迭代对象，故返回自己

        def next(self):
            self.a, self.b = self.b, self.a + self.b # 计算下一个值
            if self.a > 100000: # 退出循环的条件
                raise StopIteration();
            return self.a # 返回下一个值

现在，把Fib实例作用于for循环：

    >>> for n in Fib():
    ...     print n
    ...
    1
    1
    2
    3
    5
    ...
    46368
    75025

**使用\__getitem__下标访问**

要表现得像list那样按照下标取出元素，需要实现__getitem__()方法：

    class Fib(object):
        def __getitem__(self, n):
            a, b = 1, 1
            for x in range(n):
                a, b = b, a + b
            return a

现在，就可以按下标访问数列的任意一项了：

    >>> f = Fib()
    >>> f[0]
    1
    >>> f[1]
    1
    >>> f[2]
    2
    >>> f[3]
    3
    >>> f[10]
    89
    >>> f[100]
    573147844013817084101

**使用\__getattr__调用未知属性**

正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义Student类：

    class Student(object):

        def __init__(self):
            self.name = 'Michael'

调用name属性，没问题，但是，调用不存在的score属性，就有问题了：

    >>> s = Student()
    >>> print s.name
    Michael
    >>> print s.score
    Traceback (most recent call last):
      ...
    AttributeError: 'Student' object has no attribute 'score'

错误信息很清楚地告诉我们，没有找到score这个attribute。

要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性。修改如下：

    class Student(object):

        def __init__(self):
            self.name = 'Michael'

        def __getattr__(self, attr):
            if attr=='score':
                return 99

当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值：

    >>> s = Student()
    >>> s.name
    'Michael'
    >>> s.score
    99

---

## 类的访问限制

Java中，类的访问限制通过一些private，public等关键字来设定，Python中对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，
该属性就无法被外部访问。看例子：

    class Person(object):
        def __init__(self, name):
            self.name = name
            self._title = 'Mr'
            self.__job = 'Student'
    p = Person('Bob')
    print p.name
    # => Bob
    print p._title
    # => Mr
    print p.__job
    # => Error
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'Person' object has no attribute '__job'

可见，只有以双下划线开头的"__job"不能直接被外部访问。同样，类的私有函数也是一样定义。

但是，如果一个属性以"\__xxx__"的形式定义，那它又可以被外部访问了，以"\__xxx__"定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性可以使用，通常我们不要把普通属性用"\__xxx__"定义。

如果我们需要访问内部私有属性，就需要定义get，set方法了，这就和我们熟悉的Javabean很相似了。

以单下划线开头的属性"_xxx"虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。

---

## 类的继承

在python中继承中的一些特点：

* 1：在继承中基类的构造（\__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。
* 2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数
* 3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。

语法：

派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：

    class SubClassName (ParentClass1[, ParentClass2, ...]):
       """Optional class documentation string"""
       class_suite

实例：

    class Parent:        # 定义父类
      parentAttr = 100
      def __init__(self):
         print "调用父类构造函数"

      def parentMethod(self):
         print '调用父类方法'

      def setAttr(self, attr):
         Parent.parentAttr = attr

      def getAttr(self):
         print "父类属性 :", Parent.parentAttr

    class Child(Parent): # 定义子类
      def __init__(self):
         print "调用子类构造方法"

      def childMethod(self):
         print '调用子类方法 child method'

    c = Child()          # 实例化子类
    c.childMethod()      # 调用子类的方法
    c.parentMethod()     # 调用父类方法
    c.setAttr(200)       # 再次调用父类的方法
    c.getAttr()          # 再次调用父类的方法

以上代码执行结果如下：

    调用子类构造方法
    调用子类方法 child method
    调用父类方法
    父类属性 : 200

Java中类的继承只允许单一继承，而Python则可以继承多个类：

    class A:        # 定义类 A
    .....

    class B:         # 定义类 B
    .....

    class C(A, B):   # 继承类 A 和 B
    .....

你可以使用issubclass()或者isinstance()方法来检测:

* issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)
* isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。

---

## python对象销毁(垃圾回收)

Python 使用了引用计数这一简单技术来跟踪和回收垃圾。
在 Python 内部记录着所有使用中的对象各有多少引用。
一个内部跟踪变量，称为一个引用计数器。
当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是"立即"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。

    a = 40      # 创建对象  <40>
    b = a       # 增加引用， <40> 的计数
    c = [b]     # 增加引用.  <40> 的计数

    del a       # 减少引用 <40> 的计数
    b = 100     # 减少引用 <40> 的计数
    c[0] = -1   # 减少引用 <40> 的计数

垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上
是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。

**实例**

析构函数 \__del__ ，\__del__在对象销毁的时候被调用，当对象不再被使用时，\__del__方法运行：

    class Point:
       def __init__( self, x=0, y=0):
          self.x = x
          self.y = y
       def __del__(self):
          class_name = self.__class__.__name__
          print class_name, "销毁"

    pt1 = Point()
    pt2 = pt1
    pt3 = pt1
    print id(pt1), id(pt2), id(pt3) # 打印对象的id
    del pt1
    del pt2
    del pt3

以上实例运行结果如下：

    3083401324 3083401324 3083401324
    Point 销毁

注意：通常你需要在单独的文件中定义一个类。
