---
layout:     post
title:      "Python Socket 编程介绍"
subtitle:   "  "
date:       2017-03-10 6:25:00
author:     "Movesan"
header-img: "img/post-bg/post-bg-socket.png"
catalog: true
tags:
    - 网络基础
    - Socket

---

## Socket原理

#### 套接字（socket）概念

套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。

应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。

#### 建立socket连接

建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。

套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。

* 服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。

* 客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。

* 连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。

---

## Http、TCP/IP协议与Socket之间的区别

#### Socket连接与TCP/IP连接

创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。

socket则是对TCP/IP协议的封装和应用（程序员层面上）。也可以说，TPC/IP协议是传输层协议，主要解决数据 如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：

>“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如 果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，
比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”

我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现 只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等。网络有一段关于socket和TCP/IP协议关系的说法比较容易理解：

>“TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。”

实际上，传输层的TCP是基于网络层的IP协议的，而应用层的HTTP协议又是基于传输层的TCP协议的，而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口。socket是对端口通信开发的工具，它要更底层一些。

#### Socket连接与HTTP连接

由于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。

而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。

很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。

http协议是应用层的协义有个比较形象的描述：

>HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。

两个计算机之间的交流无非是两个端口之间的数据通信,具体的数据会以什么样的形式展现，是以不同的应用层协议来定义的，如HTTP、FTP...

---

## Python Socket 编程

Python 提供了两个基本的 socket 模块：

* Socket 它提供了标准的BSD Socket API。
* SocketServer 它提供了服务器重心，可以简化网络服务器的开发。

#### Socket 类型

套接字格式：socket(family, type[,protocal]) 使用给定的套接族，套接字类型，协议编号（默认为0）来创建套接字

socket 类型          | 描述
--------------------|----------------
 socket.AF_UNIX     |用于同一台机器上的进程通信（既本机通信）
 socket.AF_INET     |用于服务器与服务器之间的网络通信
 socket.AF_INET6    |基于IPV6方式的服务器与服务器之间的网络通信
 socket.SOCK_STREAM |基于TCP的流式socket通信
 socket.SOCK_DGRAM  |基于UDP的数据报式socket通信
 socket.SOCK_RAW    |原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头
 socket.SOCK_SEQPACKET |可靠的连续数据包服务

创建TCP Socket：

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

创建UDP Socket：

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

#### Socket 编程步骤

**TCP 服务端**

1、创建套接字，绑定套接字到本地IP与端口

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind()

2、开始监听链接

    s.listen()

3、进入循环，不断接受客户端的链接请求

    While True:
        s.accept()

4、接收客户端传来的数据，并且发送给对方发送数据

    s.recv()
    s.sendall()

5、传输完毕后，关闭套接字

    s.close()

**TCP 客户端**

1、创建套接字并链接至远端地址

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect()

2、链接后发送数据和接收数据

    s.sendall()
    s.recv()

3、传输完毕后，关闭套接字

---

## Socket 编程实例

#### Socket 编程实践之服务器端代码

    import socket

    HOST = '192.168.1.100'
    PORT = 8001

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((HOST, PORT))
    s.listen(5)

    print 'Server start at: %s:%s' %(HOST, PORT)
    print 'wait for connection...'

    while True:
        conn, addr = s.accept()
        print 'Connected by ', addr

        while True:
            data = conn.recv(1024)
            print data

            conn.send("server received you message.")

    # conn.close()

#### Socket 编程实践之客户端代码

    import socket
    HOST = '192.168.1.100'
    PORT = 8001

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))

    while True:
        cmd = raw_input("Please input msg:")
        s.send(cmd)
        data = s.recv(1024)
        print data

        #s.close()

---

## 引用链接

[http、TCP/IP协议与socket之间的区别](http://www.2cto.com/net/201211/166537.html) <br>
[Python Socket 编程详细介绍](https://gist.github.com/kevinkindom/108ffd675cb9253f8f71) <br>
