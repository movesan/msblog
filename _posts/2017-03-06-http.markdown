---
layout:     post
title:      "关于HTTP协议，一篇就够了"
subtitle:   " Hyper Text Transfer Protocol "
date:       2017-03-06 6:25:00
author:     "Movesan"
header-img: "img/post-bg/post-bg-http.png"
catalog: true
tags:
    - HTTP

---

## 引言

在Web应用中，服务器把网页传给浏览器，实际上就是把网页的HTML代码发送给浏览器，让浏览器显示出来。而浏览器和服务器之间的传输协议是HTTP，所以：

* HTML是超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言，会HTML，就可以编写网页；
* HTTP是在网络上传输HTML的协议，所以叫做超文本传输协议，用于浏览器和服务器的通信。

---

## HTTP 简介

HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。
HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。

#### HTTP 工作原理

![img](/img/post-in/post-http-1.jpg)

HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。
Web服务器有：Apache服务器，IIS服务器（Internet Information Services）等。
Web服务器根据接收到的请求后，向客户端发送响应信息。
HTTP默认端口号为80，但是你也可以改为8080或者其他端口。

以下是 HTTP 请求/响应的步骤：

**1、客户端连接到Web服务器**

一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。

**2、发送HTTP请求**

通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。

**3、服务器接受请求并返回HTTP响应**

Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。

**4、释放连接TCP连接**

若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;

**5、客户端浏览器解析HTML内容**

客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。

例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：

1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;

2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;

3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;

4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;

5、释放 TCP连接;

6、浏览器将该 html 文本并显示内容; 　　

#### 主要特点

* HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。
* HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。
* HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。
另一方面，在服务器不需要先前信息时它的应答就较快。

以下图表展示了HTTP协议通信流程：

![img](/img/post-in/post-http-2.png)

---

## URI & URL

URI（Uniform Resource Identifier）统一资源标识符，是一个用于标识某一互联网资源名称的字符串。
URL（Universal Resource Locator）统一资源定位符，有时也被俗称为网页地址（网址）。

通过概念，我们还是会很模糊，其中URL相对常见，应该会比较熟悉，就是在浏览器端输入的http://www.baidu.com这个字符串，那么URI又是什么呢？

可以这样说，URI属于URL更高层次的抽象，一种字符串文本标准。就是说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。二者的区别在于，URI表示请求服务器的路径，定义这么一个资源。
而URL同时说明要如何访问这个资源（http://）。

所以其实URL就是URI的一种具体的资源标识的实现方式。下面来看下URL格式。

基本格式如下:

    schema://host[:port#]/path/.../[?query-string][#anchor]

* schema 协议(例如：http, https, ftp)
* host 服务器的IP地址或者域名
* port# 服务器的端口（如果是走协议默认端口，可省略）
* path 访问资源的路径
* query-string 参数，发送给http服务器的数据
* anchor- 锚（跳转到网页的指定锚点位置）

一个完整URL 的实例 ：

http://www.website.com/test/test.aspx?name=sv&x=true#stuff

---

## HTTP 消息结构

HTTP是基于客户端/服务端（C/S）的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。

一个HTTP"客户端"是一个应用程序（Web浏览器或其他任何客户端），通过连接到服务器达到向服务器发送一个或多个HTTP的请求的目的。
一个HTTP"服务器"同样也是一个应用程序（通常是一个Web服务，如Apache Web服务器或IIS服务器等），通过接收客户端的请求并向客户端发送HTTP响应数据。

HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。
一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。

#### 客户端请求消息

客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。

![img](/img/post-in/post-http-3.png)

#### 服务器响应消息

HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。

![img](/img/post-in/post-http-4.jpg)

#### 简单格式

如果上述还不容易理解的话，这里抽象出HTTP简单格式：

**HTTP GET请求的格式：**

    GET /path HTTP/1.1
    Header1: Value1
    Header2: Value2
    Header3: Value3

每个Header一行一个，换行符是\r\n。

**HTTP POST请求的格式：**

    POST /path HTTP/1.1
    Header1: Value1
    Header2: Value2
    Header3: Value3

    body data goes here...

当遇到连续两个\r\n时，Header部分结束，后面的数据全部是Body。

**HTTP响应的格式：**

    200 OK
    Header1: Value1
    Header2: Value2
    Header3: Value3

    body data goes here...

HTTP响应如果包含body，也是通过\r\n\r\n来分隔的。请再次注意，Body的数据类型由Content-Type头来确定，如果是网页，Body就是文本，如果是图片，Body就是图片的二进制数据。

当存在Content-Encoding时，Body数据是被压缩的，最常见的压缩方式是gzip，所以，看到Content-Encoding: gzip时，需要将Body数据先解压缩，才能得到真正的数据。

#### 实例

拿本博客为例，当我们在地址栏输入movesan.me时，浏览器将显示博客首页。在这个过程中，浏览器都干了哪些事情呢？通过Network的记录，我们就可以知道。在Network中，定位到第一条记录，
点击，右侧将显示Request Headers，点击右侧的view source，我们就可以看到浏览器发给博客服务器的请求：

![img](/img/post-in/post-http-5.png)

最主要的头两行分析如下，第一行：

    GET / HTTP/1.1

GET表示一个读取请求，将从服务器获得网页数据，/表示URL的路径，URL总是以/开头，/就表示首页，最后的HTTP/1.1指示采用的HTTP协议版本是1.1。目前HTTP协议的版本就是1.1，但是大部分服务器也支持1.0版本，
主要区别在于1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度。

从第二行开始，每一行都类似于Xxx: abcdefg：

    Host: movesa.me

表示请求的域名是movesa.me。如果一台服务器有多个网站，服务器就需要通过Host来区分浏览器请求的是哪个网站。

继续往上找到Response Headers，点击view source，显示服务器返回的原始响应数据：

![img](/img/post-in/post-http-6.png)

HTTP响应分为Header和Body两部分（Body是可选项），我们在Network中看到的Header最重要的几行如下：

    200 OK

200表示一个成功的响应，后面的OK是说明。失败的响应有404 Not Found：网页不存在，500 Internal Server Error：服务器内部出错，等等。

    Content-Type: text/html

Content-Type指示响应的内容，这里是text/html表示HTML网页。请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐。浏览器并不靠URL来判断响应的内容，所以，即使URL是http://example.com/abc.jpg，它也不一定就是图片。

HTTP响应的Body就是HTML源码，我们在网页中右击，选择查看网页源代码或者通过快捷键 Ctrl + U 即可在浏览器中直接查看HTML源码：

![img](/img/post-in/post-http-7.png)

当浏览器读取到慕杉博客首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给博客服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，
最终显示出一个完整的页面。所以我们在Network下面能看到很多额外的HTTP请求。

---

## HTTP 请求方法

根据HTTP标准，HTTP请求可以使用多种请求方法。<br>
HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>
HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。

序    |方法       | 描述
------|-----------|----------------
 1    |GET	      |请求指定的页面信息，并返回实体主体
 2    |HEAD	      |类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头
 3    |POST	      |向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改
 4    |PUT        |从客户端向服务器传送的数据取代指定的文档的内容
 5    |DELETE     |请求服务器删除指定的页面
 6    |CONNECT    |HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器
 7    |OPTIONS    |允许客户端查看服务器的性能
 8    |TRACE      |回显服务器收到的请求，主要用于测试或诊断

#### GET 与 POST 区别

GET和POST是HTTP请求的两种基本方法，也是用的最多的两种方法，虽然底层都是TCP/IP协议，但是也有着如下区别：

* GET在浏览器回退时是无害的，而POST会再次提交请求
* GET产生的URL地址可以被Bookmark，而POST不可以
* GET请求会被浏览器主动cache，而POST不会，除非手动设置
* GET请求只能进行url编码，而POST支持多种编码方式
* GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留
* GET请求在URL中传送的参数是有长度限制的，不能超过2kb，而POST没有，文件上传只能用post
* 对参数的数据类型，GET只接受ASCII字符，而POST没有限制
* GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息
* GET参数通过URL传递，POST放在Request body中

由二者的区别可以看出post相比get有很多优点，比如相比get，post更为安全，但是为什么现在的HTTP通信中大多数请求还是使用get呢？

这就涉及到二者的使用场景了，从二者的命名来看，get是一个获取的动作，所以在做数据查询时，建议用 Get 方式；
而post有邮寄的意思，一般我们邮寄信物什么的都相对保密些，里面什么东西是看不到的，别人也就无法修改了。所以在做数据添加、修改或删除这些安全性比较高的操作时，建议用Post 方式。
另外在提交一些不紧要信息时，使用 get，效率高。

---

## HTTP 响应头信息

HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。

详细请求头信息可点击[这里](http://www.w3cschool.cn/http/6hafgfmw.html)，查看w3cschool介绍。

---

## HTTP 状态码

当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。
HTTP状态码的英文为HTTP Status Code。

状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:

**1xx：指示信息--表示请求已接收，继续处理**

**2xx：成功--表示请求已被成功接收、理解、接受**

**3xx：重定向--要完成请求必须进行更进一步的操作**

**4xx：客户端错误--请求有语法错误或请求无法实现**

**5xx：服务器端错误--服务器未能实现合法的请求**

下面是常见的HTTP状态码：

* 200 OK                        //客户端请求成功
* 400 Bad Request               //客户端请求有语法错误，不能被服务器所理解
* 401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
* 403 Forbidden                 //服务器收到请求，但是拒绝提供服务
* 404 Not Found                 //请求资源不存在，eg：输入了错误的URL
* 500 Internal Server Error     //服务器发生不可预期的错误
* 503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常

详细状态码分类以及列表可点击[这里](http://www.w3cschool.cn/http/g9prxfmx.html)，查看w3cschool介绍。

---

## HTTP content-type

Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却
是下载到的一个文件或一张图片的原因。

详细content-type对照表可点击[这里](http://www.w3cschool.cn/http/ahkmgfmz.html)，查看w3cschool介绍。

---

## 引用链接

[HTTP协议简介 - 廖雪峰](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832653051fd44e44e4f9e4ed08f3e5a5ab550358d000)<br>
[HTTP教程 - w3cschool](http://www.w3cschool.cn/http/a96bxfml.html)
[]()
